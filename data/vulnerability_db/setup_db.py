import os
from autogen.agentchat.contrib.graph_rag.document import Document, DocumentType
from graphrag_sdk import Attribute, AttributeType, Entity, Ontology, Relation
from autogen.agentchat.contrib.graph_rag.falkor_graph_query_engine import FalkorGraphQueryEngine
from graphrag_sdk.models.openai import OpenAiGenerativeModel

#Should use this repo for the vulnerability db
#Have to change to neo4j
#https://github.com/happyResearcher/VulKG

def create_vulnerability_db(load_data=True):
    """Sets up the vulnerability knowledge graph database"""
    # Create ontology for vulnerability database
    vulnerability_ontology = Ontology()
    vulnerability_ontology.add_entity(
        Entity(
            label="Vulnerability",
            attributes=[
                Attribute(name="name", attr_type=AttributeType.STRING, required=True),
                Attribute(name="cve_id", attr_type=AttributeType.STRING, required=False),
                Attribute(name="description", attr_type=AttributeType.STRING, required=False),
                Attribute(name="severity", attr_type=AttributeType.STRING, required=False),
            ],
        )
    )
    vulnerability_ontology.add_entity(
        Entity(
            label="ExploitTechnique",
            attributes=[
                Attribute(name="name", attr_type=AttributeType.STRING, required=True),
                Attribute(name="description", attr_type=AttributeType.STRING, required=False),
                Attribute(name="target_tech", attr_type=AttributeType.STRING, required=False),
            ],
        )
    )
    vulnerability_ontology.add_relation(
        Relation(
            label="EXPLOITED_BY",
            source="Vulnerability",
            target="ExploitTechnique",
        )
    )
    
    # Create query engine
    query_engine = FalkorGraphQueryEngine(
        name="vulnerability_db",
        host="localhost",
        port=6379,
        ontology=vulnerability_ontology,
        model=OpenAiGenerativeModel("gpt-4o"),
    )
    
    # Load and populate database if requested
    if load_data:
        # Define paths to vulnerability data files
        data_dir = os.path.join(os.path.dirname(__file__))
        input_paths = [
            os.path.join(data_dir, "vulnerabilities.jsonl"),
            os.path.join(data_dir, "exploit_techniques.jsonl"),
        ]
        
        # Check if data files exist
        if all(os.path.exists(path) for path in input_paths):
            # Create document objects for each data file
            input_documents = [
                Document(doctype=DocumentType.TEXT, path_or_url=input_path) 
                for input_path in input_paths
            ]
            
            # Initialize or connect to the database and ingest data
            try:
                # If database doesn't exist, initialize it with data
                query_engine.init_db(input_doc=input_documents)
                print("Initialized vulnerability database with data")
            except Exception as e:
                print(f"Error initializing database: {e}")
                # If database already exists, just connect to it
                query_engine.connect_db()
                print("Connected to existing vulnerability database")
        else:
            # Just connect to existing database without loading data
            print("Data files not found. Connecting to existing database if available.")
            query_engine.connect_db()
    else:
        # Just connect to the database without loading data
        query_engine.connect_db()
    
    return query_engine